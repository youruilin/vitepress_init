import{_ as l,c as h,o as d,ae as a,j as s,a as i,t as n}from"./chunks/framework.BKKWquEI.js";const p="/vitepress_init/assets/image-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A.CWaFpQm0.png",r="/vitepress_init/assets/image-target_currentTarget.Ddj43cvS.png",k="/vitepress_init/assets/image-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%A7%86%E5%8F%A3.BxMSCyAR.png",o="/vitepress_init/assets/image-%E4%BF%AE%E6%94%B9%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%A0%87%E9%A2%98.Bqam9Ioi.png",c="/vitepress_init/assets/image-%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%88%AA%E6%A0%8F%E8%83%8C%E6%99%AF.CT4saL1Z.png",g="/vitepress_init/assets/image-%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%A0%87%E9%A2%98%E9%A2%9C%E8%89%B2.Dul51LV4.png",E="/vitepress_init/assets/image-%E7%AA%97%E5%8F%A3%E5%BA%95%E8%89%B2.DeBwlgPW.png",C=JSON.parse('{"title":"1. wxml 模板语法","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-项目创建/02-小程序/02-模板与配置.md","filePath":"articles/01-项目创建/02-小程序/02-模板与配置.md"}'),y={name:"articles/01-项目创建/02-小程序/02-模板与配置.md"};function u(e,t,x,b,F,m){return d(),h("div",null,[t[4]||(t[4]=a(`<h1 id="_1-wxml-模板语法" tabindex="-1">1. wxml 模板语法 <a class="header-anchor" href="#_1-wxml-模板语法" aria-label="Permalink to &quot;1. wxml 模板语法&quot;">​</a></h1><h2 id="数据绑定的-基本原则" tabindex="-1">数据绑定的 基本原则 <a class="header-anchor" href="#数据绑定的-基本原则" aria-label="Permalink to &quot;数据绑定的 基本原则&quot;">​</a></h2><ul><li>在 data 中定义数据</li><li>在 WXML 中使用数据</li></ul><h2 id="_1-1-在data中定义页面的数据" tabindex="-1">1.1 在data中定义页面的数据 <a class="header-anchor" href="#_1-1-在data中定义页面的数据" aria-label="Permalink to &quot;1.1 在data中定义页面的数据&quot;">​</a></h2><p>像这样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 字符串类型的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    info：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;init data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 数组类型的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msgList: [{msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_1-2-mustache-语法的格式" tabindex="-1">1.2 Mustache 语法的格式 <a class="header-anchor" href="#_1-2-mustache-语法的格式" aria-label="Permalink to &quot;1.2 Mustache 语法的格式&quot;">​</a></h2><p>把data 中的数据绑定到页面中渲染，使用 Mustache 语法 （双大括号）将变量包起来即可。</p><h2 id="_1-3-mustache-语法的应用场景" tabindex="-1">1.3 Mustache 语法的应用场景 <a class="header-anchor" href="#_1-3-mustache-语法的应用场景" aria-label="Permalink to &quot;1.3 Mustache 语法的应用场景&quot;">​</a></h2><ul><li>绑定内容</li><li>绑定属性</li><li>运算（包括三元运算、算数运算符）</li></ul><h3 id="_1-3-1-动态绑定内容" tabindex="-1">1.3.1 动态绑定内容 <a class="header-anchor" href="#_1-3-1-动态绑定内容" aria-label="Permalink to &quot;1.3.1 动态绑定内容&quot;">​</a></h3><p>页面的数据如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 字符串类型的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    info：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;init data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 数组类型的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msgList: [{msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>结构为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;image src=&quot;{{ imgSrc }}&quot;&gt;&lt;/image&gt;</span></span></code></pre></div><h3 id="_1-3-2-三元运算" tabindex="-1">1.3.2 三元运算 <a class="header-anchor" href="#_1-3-2-三元运算" aria-label="Permalink to &quot;1.3.2 三元运算&quot;">​</a></h3><p>页面的数据如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    randomNum: Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 生成10以内的随机数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>结构为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;view&gt; {{ randomNum &gt;= 5 ? &#39;随机数字 &gt;= 5&#39; : &#39;随机数字 &lt; 5&#39; }} &lt;/view&gt;</span></span></code></pre></div><h3 id="_1-3-2-算数运算" tabindex="-1">1.3.2 算数运算 <a class="header-anchor" href="#_1-3-2-算数运算" aria-label="Permalink to &quot;1.3.2 算数运算&quot;">​</a></h3><p>页面的数据如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    randomNum: Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成一个带两位小数的随机数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>结构为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;view&gt;生成100以内的随机数 {{ randomNum * 100 }} &lt;/view&gt;</span></span></code></pre></div><h2 id="_1-4-事件绑定" tabindex="-1">1.4 事件绑定 <a class="header-anchor" href="#_1-4-事件绑定" aria-label="Permalink to &quot;1.4 事件绑定&quot;">​</a></h2><p>事件是 渲染层到逻辑层的通讯方式 。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。</p><p><img src="`+p+'" alt="image-20250717230415794"></p><h3 id="_1-4-1小程序中常用的事件" tabindex="-1">1.4.1小程序中常用的事件 <a class="header-anchor" href="#_1-4-1小程序中常用的事件" aria-label="Permalink to &quot;1.4.1小程序中常用的事件&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;"><strong>事件类型</strong></th><th style="text-align:center;"><strong>事件名称</strong></th><th style="text-align:center;"><strong>触发时机</strong></th><th style="text-align:center;"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong><code>tap</code> 点击事件</strong></td><td style="text-align:center;"><code>bindtap</code></td><td style="text-align:center;">点击事件（冒泡）</td><td style="text-align:center;">最常用的点击事件</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>catchtap</code></td><td style="text-align:center;">点击事件（阻止冒泡）</td><td style="text-align:center;">需阻止事件冒泡时使用</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindlongpress</code></td><td style="text-align:center;">长按事件</td><td style="text-align:center;">长按触发（冒泡）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>catchlongpress</code></td><td style="text-align:center;">长按事件（阻止冒泡）</td><td style="text-align:center;">需阻止事件冒泡时使用</td></tr><tr><td style="text-align:center;"><strong><code>touch</code> 触摸事件</strong></td><td style="text-align:center;"><code>bindtouchstart</code></td><td style="text-align:center;">触摸开始</td><td style="text-align:center;">触摸交互相关</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindtouchmove</code></td><td style="text-align:center;">触摸移动</td><td style="text-align:center;">触摸交互相关</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindtouchend</code></td><td style="text-align:center;">触摸结束</td><td style="text-align:center;">触摸交互相关</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindtouchcancel</code></td><td style="text-align:center;">触摸取消（如被其他事件打断）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong>表单事件</strong></td><td style="text-align:center;"><code>bindinput</code></td><td style="text-align:center;">输入框内容实时变化</td><td style="text-align:center;">实时监听输入内容</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindchange</code></td><td style="text-align:center;">输入框内容变化（失去焦点时触发）</td><td style="text-align:center;">非实时监听</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindfocus</code></td><td style="text-align:center;">输入框获取焦点</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindblur</code></td><td style="text-align:center;">输入框失去焦点</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>bindsubmit</code></td><td style="text-align:center;">表单提交</td><td style="text-align:center;">需在 <code>&lt;form&gt;</code> 组件上绑定</td></tr><tr><td style="text-align:center;"><strong>页面生命周期</strong></td><td style="text-align:center;"><code>onLoad</code></td><td style="text-align:center;">页面加载时触发（接收页面参数 <code>options</code>）</td><td style="text-align:center;">页面初始化时调用</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onShow</code></td><td style="text-align:center;">页面显示时触发（每次打开页面都会调用）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onReady</code></td><td style="text-align:center;">页面初次渲染完成时触发（仅一次）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onHide</code></td><td style="text-align:center;">页面隐藏时触发（如跳转到其他页面）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onUnload</code></td><td style="text-align:center;">页面卸载时触发（如 <code>redirectTo</code> 或 <code>navigateBack</code> 关闭页面）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onPullDownRefresh</code></td><td style="text-align:center;">下拉刷新时触发（需在页面配置中启用 <code>enablePullDownRefresh</code>）</td><td style="text-align:center;">下拉刷新功能</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onReachBottom</code></td><td style="text-align:center;">上拉触底时触发（需配置 <code>onReachBottomDistance</code>）</td><td style="text-align:center;">上拉加载更多功能</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>onPageScroll</code></td><td style="text-align:center;">页面滚动时触发（可获取滚动位置 <code>scrollTop</code>）</td><td style="text-align:center;">滚动监听</td></tr></tbody></table><hr><p><strong>事件类型说明</strong>：</p><ol><li><strong><code>tap</code> 点击事件</strong><ul><li>包括普通点击 (<code>bindtap</code>/<code>catchtap</code>) 和长按 (<code>bindlongpress</code>/<code>catchlongpress</code>)。</li><li><code>catch</code> 前缀会阻止事件冒泡到父组件。</li></ul></li><li><strong><code>touch</code> 触摸事件</strong><ul><li>用于更精细的触摸交互（如滑动、拖拽等）。</li><li>通常需要结合坐标计算实现自定义手势。</li></ul></li><li><strong>表单事件</strong><ul><li>监听输入框或表单的交互行为。</li><li><code>bindinput</code> 适合实时搜索，<code>bindchange</code> 适合最终提交验证。</li></ul></li><li><strong>页面生命周期事件</strong><ul><li>控制页面加载、显示、隐藏等状态。</li><li><code>onPullDownRefresh</code> 和 <code>onReachBottom</code> 需在页面配置中启用。</li></ul></li></ol><h3 id="_1-4-2-事件对象的属性列表" tabindex="-1">1.4.2 事件对象的属性列表 <a class="header-anchor" href="#_1-4-2-事件对象的属性列表" aria-label="Permalink to &quot;1.4.2 事件对象的属性列表&quot;">​</a></h3><p>当事件回调触发的时候，会收到一个事件对象 event ，它的详细属性如下表所示：</p><table tabindex="0"><thead><tr><th style="text-align:center;"><strong>属性类别</strong></th><th style="text-align:center;"><strong>属性名</strong></th><th style="text-align:center;"><strong>类型</strong></th><th style="text-align:center;"><strong>说明</strong></th><th style="text-align:center;"><strong>适用场景</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>基础属性</strong></td><td style="text-align:center;"><code>type</code></td><td style="text-align:center;">string</td><td style="text-align:center;">事件类型（如 <code>tap</code>、<code>input</code> 等）</td><td style="text-align:center;">所有事件</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>timeStamp</code></td><td style="text-align:center;">number</td><td style="text-align:center;">事件生成时的时间戳（单位：毫秒）</td><td style="text-align:center;">性能分析、事件计时</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><strong><code>target</code></strong></td><td style="text-align:center;"><strong>object</strong></td><td style="text-align:center;"><strong>触发事件的组件的一些属性值集合</strong></td><td style="text-align:center;"><strong>区分事件源</strong></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>currentTarget</code></td><td style="text-align:center;">object</td><td style="text-align:center;">当前组件的一些属性值集合（可能不同于 <code>target</code>）</td><td style="text-align:center;">事件冒泡时区分当前组件</td></tr><tr><td style="text-align:center;"><strong>触摸事件特有</strong></td><td style="text-align:center;"><code>touches</code></td><td style="text-align:center;">array</td><td style="text-align:center;">当前停留在屏幕上的触摸点信息的数组</td><td style="text-align:center;"><code>touchstart</code>/<code>move</code>/<code>end</code></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>changedTouches</code></td><td style="text-align:center;">array</td><td style="text-align:center;">触摸事件中发生变化的触摸点信息的数组（如从无到有、位置变化等）</td><td style="text-align:center;"><code>touchstart</code>/<code>move</code>/<code>end</code></td></tr><tr><td style="text-align:center;"><strong>表单事件特有</strong></td><td style="text-align:center;"><strong><code>detail</code></strong></td><td style="text-align:center;"><strong>object</strong></td><td style="text-align:center;"><strong>额外的信息（如 <code>input</code> 事件的输入值、<code>scroll</code> 事件的滚动位置等）</strong></td><td style="text-align:center;"><strong><code>input</code>/<code>scroll</code>/<code>form</code> 等事件</strong></td></tr><tr><td style="text-align:center;"><strong>自定义数据</strong></td><td style="text-align:center;"><code>dataset</code></td><td style="text-align:center;">object</td><td style="text-align:center;">事件源组件上由 <code>data-</code> 开头的自定义属性组成的对象</td><td style="text-align:center;">所有事件（组件间通信）</td></tr><tr><td style="text-align:center;"><strong>其他</strong></td><td style="text-align:center;"><code>touches[0].clientX</code> <code>touches[0].clientY</code></td><td style="text-align:center;">number</td><td style="text-align:center;">触摸点的客户端屏幕坐标（X/Y）</td><td style="text-align:center;">精确触摸位置计算</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>touches[0].pageX</code> <code>touches[0].pageY</code></td><td style="text-align:center;">number</td><td style="text-align:center;">触摸点的页面坐标（含滚动偏移，X/Y）</td><td style="text-align:center;">考虑页面滚动的触摸位置</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>detail.x</code> <code>detail.y</code></td><td style="text-align:center;">number</td><td style="text-align:center;">某些事件（如 <code>scroll</code>）的滚动位置坐标</td><td style="text-align:center;">滚动事件</td></tr></tbody></table><hr><h3 id="_1-4-3-target-和-currenttarget-的区别" tabindex="-1">1.4.3 target 和 currentTarget 的区别 <a class="header-anchor" href="#_1-4-3-target-和-currenttarget-的区别" aria-label="Permalink to &quot;1.4.3 target 和 currentTarget 的区别&quot;">​</a></h3><p>target是触发该事件的源头组件 ，而 currentTarget 则是 当前事件所绑定的组件 。举例如下：</p><p><img src="'+r+`" alt="image-20250718112915569"></p><p>点击内部的按钮时，点击事件以冒泡 的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。</p><p>此时，对于外层的 view 来说：</p><ul><li>e.target 指向的是触发事件的源头组件，因此， e.target 是内部的按钮组件</li><li>e.currentTarget 指向的是当前正在触发事件的那个组件，因此， e.currentTarget 是当前的 view 组</li></ul><h3 id="_1-4-4-bindtap-的语法格式" tabindex="-1">1.4.4 bindtap 的语法格式 <a class="header-anchor" href="#_1-4-4-bindtap-的语法格式" aria-label="Permalink to &quot;1.4.4 bindtap 的语法格式&quot;">​</a></h3><p>在 小程序中，不存HTML 中的 onclick 鼠标点击事件，而是通过 tap 事件 来响应用户的触摸行为。 ① 通过 bindtap ，可以为组件绑定 tap 触摸事件，语法如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btnTapHandler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;按钮&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>② 在页面的 .js 文件中定义对应的事件处理函数，事件参数通过形参 eventevent（一般 简写成 e） 来接收：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  btnTapHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_1-4-5-在事件处理函数中为data中的数据赋值" tabindex="-1">1.4.5 在事件处理函数中为data中的数据赋值 <a class="header-anchor" href="#_1-4-5-在事件处理函数中为data中的数据赋值" aria-label="Permalink to &quot;1.4.5 在事件处理函数中为data中的数据赋值&quot;">​</a></h3><p>通过调用 this.setData(dataObject) 方法，可以给页面<code>data</code>中的数据重新赋值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面的 .js 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 修改 count 的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  changeCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>更推荐将方法放在 <code>methods</code> 对象中</strong>（虽然直接定义在Page下也有效）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    changeCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更规范的写法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li><strong>优势</strong>：代码组织更清晰，与Vue等框架风格一致。</li></ul><h3 id="_1-4-6-事件传参" tabindex="-1">1.4.6 事件传参 <a class="header-anchor" href="#_1-4-6-事件传参" aria-label="Permalink to &quot;1.4.6 事件传参&quot;">​</a></h3><p>小程序中的事件传参比较特殊，不能在绑定事件的同时为事件处理函数传递参数 。例如，下面的代码将不能正常工作：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btnHandle(123)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;事件传参&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>因为小程序会把 bindtap 的属性值，统一当作事件名称来处理，相当于要调用一个名称为 btnHandler(123)的事件处理函数。</p><p>正确的做法为，为组件提供 data-* 自定义属性传参，其中 * 代表参数名称：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btnHandle&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{2}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;事件传参&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>最终：</p><ul><li>info 被解析为参数的名称</li><li>数值 2 被解析为参数的值</li></ul><p>事件处理函数中，通过 event.target.dataset.参数名即可获取到具体参数的值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">btnHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // dataset 是一个对象，包含了所有通过 data-* 传递过来的参数想</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.target.dataset)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 datase 可以访问到具体参数的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.target.dataset.info)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="_1-4-7-bindinput-的语法格式" tabindex="-1">1.4.7 bindinput 的语法格式 <a class="header-anchor" href="#_1-4-7-bindinput-的语法格式" aria-label="Permalink to &quot;1.4.7 bindinput 的语法格式&quot;">​</a></h3><p>在小程序中，通过 input 事件 来响应文本框的输入事件，语法格式如下： ① 通过 bindinput ，可以为文本框绑定输入事件：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindinput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inputHandler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>② 在页面的 .js 文件中定义事件处理函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // e.detail.value 是变化过后，文本框的最新值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.detail.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-4-8-实现文本框和-data-之间的数据同步" tabindex="-1">1.4.8 实现文本框和 data 之间的数据同步 <a class="header-anchor" href="#_1-4-8-实现文本框和-data-之间的数据同步" aria-label="Permalink to &quot;1.4.8 实现文本框和 data 之间的数据同步&quot;">​</a></h3><p>定义数据:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	msg:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>渲染结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{msg}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindinput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iptHandler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>美化样式：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soild </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#eee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-redius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>绑定 input 事件处理函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文本框内容改变事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iptHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 通过 e.detail.value 获取到文本框的最新值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		msg：e.detail.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当用户在输入框输入内容时：</p><ol><li>小程序框架会自动触发 <code>bindinput</code> 绑定的 <code>iptHandler</code> 函数。</li><li><strong>框架会将一个事件对象 <code>e</code> 作为参数传入 <code>iptHandler</code></strong>。</li><li>这个 <code>e</code> 对象的 <code>detail.value</code> 属性<strong>已经包含了输入框的最新值</strong>（由小程序框架内部维护）。</li></ol><h2 id="_1-5-条件渲染" tabindex="-1">1.5 条件渲染 <a class="header-anchor" href="#_1-5-条件渲染" aria-label="Permalink to &quot;1.5 条件渲染&quot;">​</a></h2><h3 id="_1-5-1-wx-if" tabindex="-1">1.5.1 wx:if <a class="header-anchor" href="#_1-5-1-wx-if" aria-label="Permalink to &quot;1.5.1 wx:if&quot;">​</a></h3>`,82)),s("p",null,[t[0]||(t[0]=i("在小程序中，使用 ")),s("code",null,'wx:if="'+n(e.condition)+'"',1),t[1]||(t[1]=i(" 来判断是否需要渲染该代码块："))]),t[5]||(t[5]=a(`<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{condition}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;True&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>也可以使用 <code>wx:elif</code> 和 <code>wx:else</code> 添加判断分支：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{type === 1}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;男&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{type === 2}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;女&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;保密&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果要一次性控制多个组件的展示与隐藏，可以使用一个 <code>&lt;block&gt;</code> 标签将多个组件包裹起来，并在 <code>&lt;block&gt;</code> 上使用 <code>wx:if</code> 控制：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">block</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{true}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;view&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;view&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>注意：<code>&lt;block&gt;</code> 并不是一个组件，它只是一个包裹性质的容器，不会在页面中做任何渲染。</p></blockquote><h3 id="_1-5-2-hidden" tabindex="-1">1.5.2 hidden <a class="header-anchor" href="#_1-5-2-hidden" aria-label="Permalink to &quot;1.5.2 hidden&quot;">​</a></h3>`,7)),s("p",null,[t[2]||(t[2]=i("小程序中，也可以使用 ")),s("code",null,'hidden="'+n(e.condition)+'"',1),t[3]||(t[3]=i(" 控制元素的显示与隐藏："))]),t[6]||(t[6]=a(`<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{condition}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;条件为 true 隐藏，条件为 false 显示&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h3 id="wx-if-与-hidden-的对比" tabindex="-1">wx:if 与 hidden 的对比 <a class="header-anchor" href="#wx-if-与-hidden-的对比" aria-label="Permalink to &quot;wx:if 与 hidden 的对比&quot;">​</a></h3><ol><li>运行方式不同：</li></ol><ul><li><code>wx:if</code> 是以 <strong>动态创建和移除元素</strong> 的方式控制显示。</li><li><code>hidden</code> 是以 <strong>切换样式（display: none/block）</strong> 的方式控制显示。</li></ul><ol start="2"><li>使用建议：</li></ol><ul><li><strong>频繁切换时</strong>，建议使用 <code>hidden</code>。</li><li><strong>条件复杂时</strong>，建议使用 <code>wx:if</code> 搭配 <code>wx:elif</code> 和 <code>wx:else</code> 来控制展示与隐藏。</li></ul><h2 id="_1-6-列表渲染" tabindex="-1">1.6 列表渲染 <a class="header-anchor" href="#_1-6-列表渲染" aria-label="Permalink to &quot;1.6 列表渲染&quot;">​</a></h2><h3 id="_1-6-1-wx-for" tabindex="-1">1.6.1 wx:for <a class="header-anchor" href="#_1-6-1-wx-for" aria-label="Permalink to &quot;1.6.1 wx:for&quot;">​</a></h3><p>通过 wx:for 可以根据指定的数组，循环渲染重复的组件结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{array}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	索引是：{{index}} 当前项是：{{item}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>默认情况下，当前循环项的索引 用 index 表示； 当前循环项 用 item 表示。</p><h3 id="_1-6-2手动指定索引和当前项的变量名" tabindex="-1">1.6.2手动指定索引和当前项的变量名 * <a class="header-anchor" href="#_1-6-2手动指定索引和当前项的变量名" aria-label="Permalink to &quot;1.6.2手动指定索引和当前项的变量名 *&quot;">​</a></h3><ul><li><p>使用 wx:for for-index 可以指定 当前循环项的索引 的变量名</p></li><li><p>使用 wx:for for-item 可以指定 当前项 的变量名 示例代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{array}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for-index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;idx&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;itemName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	索引是：{{idx}} 当前项是：{{itemName}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="_1-6-3-wx-key-的使用" tabindex="-1">1.6.3 wx:key 的使用 <a class="header-anchor" href="#_1-6-3-wx-key-的使用" aria-label="Permalink to &quot;1.6.3 wx:key 的使用&quot;">​</a></h3><p>类似于 Vue 列表渲染中的 :key ，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的 key 值， 从而 提高渲染的效率 ：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// data 数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userList: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { id: 1, name: &#39;小红&#39; },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { id: 2, name: &#39;小黄&#39; },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { id: 3, name: &#39;小白&#39; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- wxml 结构 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{userList}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{item.name}}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h1 id="_2-wxss-模板样式" tabindex="-1">2. wxss 模板样式 <a class="header-anchor" href="#_2-wxss-模板样式" aria-label="Permalink to &quot;2. wxss 模板样式&quot;">​</a></h1><h2 id="_2-1-基本概念" tabindex="-1">2.1 基本概念 <a class="header-anchor" href="#_2-1-基本概念" aria-label="Permalink to &quot;2.1 基本概念&quot;">​</a></h2><p>WXSS (WeiXin Style Sheets)是一套 样式语言 ，用于美化 WXML 的组件样式，类似于网页开发中的 CSS 。</p><p>WXSS 具有 CSS 大部分特性， 同时WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。 与 CSS 相比， WXSS 扩展的特性有：</p><ul><li>rpx 尺寸单位</li><li>@import 样式导入</li></ul><h2 id="_2-2-rpx" tabindex="-1">2.2 rpx <a class="header-anchor" href="#_2-2-rpx" aria-label="Permalink to &quot;2.2 rpx&quot;">​</a></h2><p>rpx（responsive pixel ）是微信小程序独有的，用来 解决屏适配的尺寸单位 。</p><p>rpx的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把所有设备的屏幕，在宽度上等分为 750 份（即： 当前屏幕的总宽度为 750rpx）。</p><ul><li>在较小 的设备上， 1rpx 所代表的宽度较小</li><li>在较大 的设备上， 1rpx 所代表的宽度较大</li></ul><p>小程序在不同设备上运行的时候，会自动把rpx 的样式单位换算成对应的像素单位来渲染，从而实现屏幕适配。</p><h2 id="_2-3-rpx-与-px-之间的单位换算" tabindex="-1">2.3 rpx 与 px 之间的单位换算 <a class="header-anchor" href="#_2-3-rpx-与-px-之间的单位换算" aria-label="Permalink to &quot;2.3 rpx 与 px 之间的单位换算&quot;">​</a></h2><p><strong>rpx 与 px 的核心区别</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">单位</th><th>全称</th><th style="text-align:center;">特点</th><th style="text-align:center;">适用场景</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>rpx</strong></td><td>responsive pixel（响应式像素）</td><td style="text-align:center;">根据屏幕宽度自动缩放，保证不同设备显示比例一致</td><td style="text-align:center;">小程序中<strong>推荐优先使用</strong>，尤其是需要适配多种屏幕的场景（如布局、字体大小）</td></tr><tr><td style="text-align:center;"><strong>px</strong></td><td>pixel（物理像素）</td><td style="text-align:center;">固定物理像素值，不随屏幕变化</td><td style="text-align:center;">用于需要<strong>精确控制像素</strong>的场景（如边框、阴影等细节）</td></tr></tbody></table><hr><p><strong>rpx 与 px 的换算规则</strong></p><p>小程序的 rpx 设计目标是：<strong>在所有设备上，750rpx 恰好等于屏幕宽度</strong>。 因此，换算公式为：</p><p>rpx=px×设计稿宽度（px）750</p><p>或反向换算：</p><p>px=rpx×750设计稿宽度（px）</p><p><strong>常见场景示例</strong>：</p><ol><li><strong>以 750px 宽度的设计稿为准</strong>（小程序官方推荐设计稿宽度）： <ul><li><strong>1px（设计稿） = 1rpx（小程序）</strong> （因为 <code>750rpx = 750px</code>，所以 <code>1rpx = 1px</code>）</li><li><strong>例如</strong>：设计稿中一个按钮宽度为 <code>150px</code>，则小程序中直接写 <code>width: 150rpx</code>。</li></ul></li><li><strong>以其他宽度（如 375px）的设计稿为准</strong>： <ul><li>换算公式：<code>1px（设计稿） = 2rpx（小程序）</code> （因为 <code>750rpx = 375px</code>，所以 <code>1rpx = 0.5px</code>，即 <code>1px = 2rpx</code>）</li><li><strong>例如</strong>：设计稿中一个元素高度为 <code>100px</code>，则小程序中需写 <code>height: 200rpx</code>。</li></ul></li></ol><h2 id="_2-4-样式导入" tabindex="-1">2.4 样式导入 <a class="header-anchor" href="#_2-4-样式导入" aria-label="Permalink to &quot;2.4 样式导入&quot;">​</a></h2><p>使用 WXSS 提供的 @import 语法，可以导入外联的样式表。</p><p>@import 后跟需要导入的外联样式表的 相对路径 ，用 ;表示语句结束，示例如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** common.wxss **/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.small-p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** app.wxss **/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;common.wxss&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.middle-p {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  padding: 5px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-5-全局样式和局部样式" tabindex="-1">2.5 全局样式和局部样式 <a class="header-anchor" href="#_2-5-全局样式和局部样式" aria-label="Permalink to &quot;2.5 全局样式和局部样式&quot;">​</a></h2><p>定义在 app.wxss 中的样式为全局样式 ，作用于每一个页面。</p><p>在页面的 .wxss 文件中定义的样式为局部样式 ，只作用于当前页面。</p><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>① 当局部样式和全局样式冲突时，根据 就近原则 ，局部样式会 覆盖 全局样式</p><p>② 当局部样式的 权重大于或等于 全局样式的权重时，才会覆盖全局的样式</p></div><h1 id="_3-全局配置" tabindex="-1">3. 全局配置 <a class="header-anchor" href="#_3-全局配置" aria-label="Permalink to &quot;3. 全局配置&quot;">​</a></h1><h2 id="_3-1-1全局配置文件及常用配置项" tabindex="-1">3.1.1全局配置文件及常用配置项 <a class="header-anchor" href="#_3-1-1全局配置文件及常用配置项" aria-label="Permalink to &quot;3.1.1全局配置文件及常用配置项&quot;">​</a></h2><p>小程序根目录下的 app.json 文件是小程序的 全局配置文件 。常用的配置项如下：</p><p>① pages：记录当前小程序所有页面的存放路径</p><p>② window：全局设置小程序窗口的外观</p><p>③ tabBar：设置小程序底部的 tabBar 效果</p><p>④ style：是否启用新版的组件样式</p><p><img src="`+k+'" alt="image-20250719222914305"></p><h3 id="_3-1-2-了解-window-节点常用的配置项" tabindex="-1">3.1.2 了解 window 节点常用的配置项 <a class="header-anchor" href="#_3-1-2-了解-window-节点常用的配置项" aria-label="Permalink to &quot;3.1.2 了解 window 节点常用的配置项&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">配置项</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>navigationBarBackgroundColor</code></td><td style="text-align:center;">string</td><td style="text-align:center;"><code>&quot;#000000&quot;</code></td><td style="text-align:center;">导航栏背景颜色，支持十六进制颜色值（如 <code>&quot;#ffffff&quot;</code>）</td></tr><tr><td style="text-align:center;"><code>navigationBarTextStyle</code></td><td style="text-align:center;">string</td><td style="text-align:center;"><code>&quot;white&quot;</code></td><td style="text-align:center;">导航栏标题文字颜色，仅支持 <code>&quot;black&quot;</code> 或 <code>&quot;white&quot;</code></td></tr><tr><td style="text-align:center;"><code>navigationBarTitleText</code></td><td style="text-align:center;">string</td><td style="text-align:center;">-</td><td style="text-align:center;">导航栏标题文字内容</td></tr><tr><td style="text-align:center;"><code>navigationStyle</code></td><td style="text-align:center;">string</td><td style="text-align:center;"><code>&quot;default&quot;</code></td><td style="text-align:center;">导航栏样式，可选值： • <code>&quot;default&quot;</code>（默认样式，显示状态栏和导航栏） • <code>&quot;custom&quot;</code>（自定义导航栏，隐藏默认导航栏，需自行实现）</td></tr><tr><td style="text-align:center;"><code>backgroundColor</code></td><td style="text-align:center;">string</td><td style="text-align:center;"><code>&quot;#ffffff&quot;</code></td><td style="text-align:center;">窗口的背景色，支持十六进制颜色值</td></tr><tr><td style="text-align:center;"><code>backgroundTextStyle</code></td><td style="text-align:center;">string</td><td style="text-align:center;"><code>&quot;light&quot;</code></td><td style="text-align:center;">下拉 loading 的样式，仅支持 <code>&quot;light&quot;</code> 或 <code>&quot;dark&quot;</code></td></tr><tr><td style="text-align:center;"><code>enablePullDownRefresh</code></td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">是否开启下拉刷新，详见 页面下拉刷新</td></tr><tr><td style="text-align:center;"><code>onReachBottomDistance</code></td><td style="text-align:center;">number</td><td style="text-align:center;"><code>50</code></td><td style="text-align:center;">页面上拉触底事件触发时距页面底部距离，单位为 px</td></tr><tr><td style="text-align:center;"><code>disableScroll</code></td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">设置为 <code>true</code> 则页面整体不能上下滚动（仅在 <code>page.json</code> 中有效，<code>app.json</code> 中设置无效）</td></tr></tbody></table><p><strong>补充说明</strong></p><ul><li><strong><code>navigationBarTextStyle</code></strong> 和 <strong><code>backgroundTextStyle</code></strong> 仅支持 <code>&quot;black&quot;</code>/<code>&quot;white&quot;</code> 和 <code>&quot;light&quot;</code>/<code>&quot;dark&quot;</code>，分别对应浅色/深色模式下的显示效果。</li><li><strong><code>navigationStyle: &quot;custom&quot;</code></strong> 时，需自行实现导航栏（如使用 <code>&lt;view&gt;</code> 模拟），并处理状态栏高度适配（可通过 <code>wx.getSystemInfoSync().statusBarHeight</code> 获取状态栏高度）。</li><li><strong><code>disableScroll</code></strong> 仅在页面配置（<code>page.json</code>）中生效，全局配置（<code>app.json</code>）中设置无效。</li></ul><h3 id="_3-1-3-设置导航栏的标题" tabindex="-1">3.1.3 设置导航栏的标题 <a class="header-anchor" href="#_3-1-3-设置导航栏的标题" aria-label="Permalink to &quot;3.1.3 设置导航栏的标题&quot;">​</a></h3><p>设置步骤： app.json -&gt; windowwindow-&gt; navigationBarTitleText 需求：把导航栏上的标题，从默认的“WeChatWeChat”修改为“ 黑马程序员 ”，效果如图所示</p><p><img src="'+o+'" alt="image-20250719223438370"></p><h3 id="_3-1-4-设置导航栏背景色" tabindex="-1">3.1.4 设置导航栏背景色 <a class="header-anchor" href="#_3-1-4-设置导航栏背景色" aria-label="Permalink to &quot;3.1.4 设置导航栏背景色&quot;">​</a></h3><p>设置步骤： app.json -&gt; windowwindow-&gt; navigationBarBackgroundColor 需求：把导航栏标题的背景色，从默认的 <code>#fff</code> 修改为 <code>#2b4b6b</code> ，效果如图所示：</p><p><img src="'+c+'" alt="image-20250719223639588"></p><h3 id="_3-1-5-设置的导航栏的标题颜色" tabindex="-1">3.1.5 设置的导航栏的标题颜色 <a class="header-anchor" href="#_3-1-5-设置的导航栏的标题颜色" aria-label="Permalink to &quot;3.1.5  设置的导航栏的标题颜色&quot;">​</a></h3><p>设置步骤： app.json -&gt; windowwindow-&gt; navigationBarTextStyle 需求：把导航栏上的标题颜色，从默认的<code>black</code> 修改为 <code>whitewhite</code>：</p><p><img src="'+g+'" alt="image-20250719223836153"></p><p>注意： navigationBarTextStyle 的可选值只有 black 和 white</p><h3 id="_3-1-6-全局开启下拉刷新" tabindex="-1">3.1.6 全局开启下拉刷新 <a class="header-anchor" href="#_3-1-6-全局开启下拉刷新" aria-label="Permalink to &quot;3.1.6  全局开启下拉刷新&quot;">​</a></h3><p>概念：下拉刷新 是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而 重新加载页面数据 的行为。</p><p>设置步骤： app.json -&gt; windowwindow-&gt; 把 enablePullDownRefresh 的值设置为 true 注意：在 app.json 中启用下拉刷新功能，会作用于每个小程序页面！</p><h3 id="_3-1-7-设置下来刷新时的窗口背景色" tabindex="-1">3.1.7 设置下来刷新时的窗口背景色 <a class="header-anchor" href="#_3-1-7-设置下来刷新时的窗口背景色" aria-label="Permalink to &quot;3.1.7 设置下来刷新时的窗口背景色&quot;">​</a></h3><p>当全局开启下拉刷新功能之后，默认的窗口背景为白色。</p><p>如果自定义下拉刷新窗口背景色，设置步骤为: app.json -&gt;window-&gt; 为 backgroundColor 指定 16 进制的颜色值 #efefef：</p><p><img src="'+E+'" alt="image-20250719224238365"></p>',76))])}const B=l(y,[["render",u]]);export{C as __pageData,B as default};
