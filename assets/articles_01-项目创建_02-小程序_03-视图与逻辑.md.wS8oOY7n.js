import{_ as a,c as i,o as t,ae as n}from"./chunks/framework.BKKWquEI.js";const l="/vitepress_init/assets/image-%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.JxGO1sMQ.png",g=JSON.parse('{"title":"页面导航","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-项目创建/02-小程序/03-视图与逻辑.md","filePath":"articles/01-项目创建/02-小程序/03-视图与逻辑.md"}'),e={name:"articles/01-项目创建/02-小程序/03-视图与逻辑.md"};function p(h,s,k,d,r,o){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="页面导航" tabindex="-1">页面导航 <a class="header-anchor" href="#页面导航" aria-label="Permalink to &quot;页面导航&quot;">​</a></h1><h2 id="_1-1-概述" tabindex="-1">1.1 概述 <a class="header-anchor" href="#_1-1-概述" aria-label="Permalink to &quot;1.1 概述&quot;">​</a></h2><p>页面导航指的是 页面之间的相互跳转 。例如，浏览器中实现页面导航的方式有如下两种：</p><p>① <code>&lt;a&gt;</code> 链接</p><p>② location.href</p><h2 id="_1-2-页面导航的两种方法" tabindex="-1">1.2 页面导航的两种方法 <a class="header-anchor" href="#_1-2-页面导航的两种方法" aria-label="Permalink to &quot;1.2 页面导航的两种方法&quot;">​</a></h2><p>① 声明式导航</p><ul><li>在页面上声明一个<code> &lt;navigator&gt;</code> 导航组件</li><li>通过点击 <code>&lt;navigator&gt;</code> 组件实现页面跳转</li></ul><p>② 编程式导航</p><ul><li>调用小程序的导航 APIAPI，实现页面的跳转</li></ul><h3 id="_1-2-1-声明式导航-跳转至-tabbar-页面" tabindex="-1">1.2.1 声明式导航-跳转至 tabBar 页面 <a class="header-anchor" href="#_1-2-1-声明式导航-跳转至-tabbar-页面" aria-label="Permalink to &quot;1.2.1 声明式导航-跳转至 tabBar 页面&quot;">​</a></h3><p>在使用 <code>&lt;navigator&gt;</code> 组 件跳转到指定的 <code>tabBar</code> 页面时，需要指定 url 属性和 openopen-type 属性，其中：</p><ul><li>url 表示要跳转的 页面的地址 ，必须以 /开头</li><li>openopen-type 表示 跳转的方式 ，必须为 switchTab示</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pages/message/message&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;switchTab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;导航到消息页面&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_1-2-2-导航到非-tabbar-页面" tabindex="-1">1.2.2 导航到非 tabBar 页面 <a class="header-anchor" href="#_1-2-2-导航到非-tabbar-页面" aria-label="Permalink to &quot;1.2.2 导航到非 tabBar 页面&quot;">​</a></h3><p>非 tabBar 页面 指的是没有被配置为 tabBar 的页面。 在使用 <code>&lt;navigator&gt;</code> 组件跳转到普通的非 tabBar 页面时，则需要指定 url 属性和 openopen-type 属性，其中：</p><ul><li>url 表示要跳转的 页面的地址 ，必须以 /开头</li><li>openopen-type 表示 跳转的方式 ，必须为 navigate</li></ul><p>示例代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pages/info/info&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;navigate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;导航到info页面&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><details class="details custom-block"><summary>声明式导航传参</summary><p>navigator组件的 url 属性用来指定将要跳转到的页面的路径。同时， 路径的后面还可以携带参数 ：</p><ul><li>参数 与路径 之间使用 ?分隔</li><li>参数键 与参数值 用 =相连</li><li>不同参数 用 &amp;分隔</li></ul></details><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>为了简便，在导航到非 tabBar 页面时， open -type=type=&quot;navigate&quot;属性 可以省略 。</p></div><h3 id="_1-2-3-后退导航" tabindex="-1">1.2.3 后退导航 <a class="header-anchor" href="#_1-2-3-后退导航" aria-label="Permalink to &quot;1.2.3 后退导航&quot;">​</a></h3><p>如果要后退到上一页面或多级页面，则需要指定openopen-type 属性和 delta 属性，其中：</p><ul><li>openopen-type 的值必须是 navigateBack ，表示要进行后退导航</li><li>delta 的值必须是 数字 ，表示要后退的层级</li></ul><p>示例代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;navigateBack&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;返回上一页&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>为了简便，如果只是后退到上一页面，则可以省略 delta 属性 ，因为其默认值就是 1。</p></div><h3 id="_1-2-4-编程式导航-跳转到-tabbar-页面" tabindex="-1">1.2.4 编程式导航 - 跳转到 tabBar 页面 <a class="header-anchor" href="#_1-2-4-编程式导航-跳转到-tabbar-页面" aria-label="Permalink to &quot;1.2.4 编程式导航 - 跳转到 tabBar  页面&quot;">​</a></h3><p>调用 wx.switchTab(Object object object)方法，可以跳转到 tabBar 页面。其中 Object 参数对象 的属性列表如下：</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">类型</th><th style="text-align:center;">必填</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>url</strong></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;">是</td><td style="text-align:center;">需要跳转的 tabBar 页面的路径（需在 <code>app.json</code> 的 <code>tabBar</code> 中定义），路径后不能带参数。</td></tr><tr><td style="text-align:center;"><strong>success</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用成功的回调函数。</td></tr><tr><td style="text-align:center;"><strong>fail</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用失败的回调函数。</td></tr><tr><td style="text-align:center;"><strong>complete</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用结束的回调函数（调用成功、失败都会执行）。</td></tr></tbody></table><p>示例代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 页面结构</span></span>
<span class="line"><span>&lt;button bindtap=&quot;gotoMessage&quot;&gt;跳转到消息页面&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 编程式导航跳转</span></span>
<span class="line"><span>gotoMessage() {</span></span>
<span class="line"><span>  wx.switchTab({</span></span>
<span class="line"><span>    url: &#39;/pages/message/message&#39;</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_1-2-5-编程式导航-导航到非-tabbar-页面" tabindex="-1">1.2.5 编程式导航 - 导航到非 tabBar 页面 <a class="header-anchor" href="#_1-2-5-编程式导航-导航到非-tabbar-页面" aria-label="Permalink to &quot;1.2.5  编程式导航 - 导航到非  tabBar  页面&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">类型</th><th style="text-align:center;">必填</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>url</strong></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;">是</td><td style="text-align:center;">需要跳转的 tabBar 页面的路径（需在 <code>app.json</code> 的 <code>tabBar</code> 中定义），路径后可以带参数。</td></tr><tr><td style="text-align:center;"><strong>success</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用成功的回调函数。</td></tr><tr><td style="text-align:center;"><strong>fail</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用失败的回调函数。</td></tr><tr><td style="text-align:center;"><strong>complete</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用结束的回调函数（调用成功、失败都会执行）。</td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;button bindtap=&quot;gotoMessage&quot;&gt;跳转到info页面&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>gotoMessage() {</span></span>
<span class="line"><span>  wx.navigateTo({</span></span>
<span class="line"><span>    url: &#39;/pages/message/message&#39;</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre></div><details class="details custom-block"><summary>编程式导航传参</summary><p>调用 wx.navigateTo()方法时，也可以携带参数跳转：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;button bindtap=&quot;gotoInfo2&quot;&gt;跳转到info页面&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>gotoInfo2() {</span></span>
<span class="line"><span>  wx.navigateTo({</span></span>
<span class="line"><span>    url: &#39;/pages/info/info?name=ls&amp;gender=男&#39;</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre></div></details><details class="details custom-block"><summary>编程式导 - onLoad 中接收导航参数</summary><p>通过声明导航传参或编程式导航传参所携带的参数，可以直接在 onLoad 实践中直接获取到：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * 生命周期函数--监听页面加载</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>onLoad: function(options) {</span></span>
<span class="line"><span>  // options 就是导航传递过来的参数对象</span></span>
<span class="line"><span>  console.log(options)</span></span>
<span class="line"><span>}</span></span></code></pre></div></details><p>###1.2.6 编程式导航 - 后退导航</p><p>调用 wx.navigateBack(Object object object)方法，可以返回上一页面或多级页面。其中 Object 参数对象可选的属性列表如下：</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">类型</th><th style="text-align:center;">必填</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>delta</strong></td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;">是</td><td style="text-align:center;">返回的页面数，如果 delta 大于现有页面数，则返回到首页。</td></tr><tr><td style="text-align:center;"><strong>success</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用成功的回调函数。</td></tr><tr><td style="text-align:center;"><strong>fail</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用失败的回调函数。</td></tr><tr><td style="text-align:center;"><strong>complete</strong></td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用结束的回调函数（调用成功、失败都会执行）。</td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 页面结构</span></span>
<span class="line"><span>&lt;button bindtap=&quot;gotoBack&quot;&gt;跳转到消息页面&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 编程式导航,后退到上一页或多页</span></span>
<span class="line"><span>gotoBack() {</span></span>
<span class="line"><span>  wx.navigateBack()</span></span>
<span class="line"><span>}</span></span></code></pre></div><h1 id="页面事件" tabindex="-1">页面事件 <a class="header-anchor" href="#页面事件" aria-label="Permalink to &quot;页面事件&quot;">​</a></h1><h2 id="下拉刷新" tabindex="-1">下拉刷新 <a class="header-anchor" href="#下拉刷新" aria-label="Permalink to &quot;下拉刷新&quot;">​</a></h2><p>下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行为。</p><h3 id="_1-1-启用方式" tabindex="-1">1.1 启用方式： <a class="header-anchor" href="#_1-1-启用方式" aria-label="Permalink to &quot;1.1 启用方式：&quot;">​</a></h3><p>启用下拉刷新有两种方式： ① 全局开启下拉刷新</p><ul><li>在 app.json 的 window 节点中，将 enablePullDownRefresh 设置为 true</li></ul><p>② 局部开启下拉刷新</p><ul><li>在页面的 .json 配置文件中，将 enablePullDownRefresh 设置为 true</li></ul><p>在实际开发中，推荐使用第 2 种方式， 为需要的页面单独开启下拉刷新的效果 。</p><h3 id="_1-2-下拉窗口样式" tabindex="-1">1.2 下拉窗口样式 <a class="header-anchor" href="#_1-2-下拉窗口样式" aria-label="Permalink to &quot;1.2 下拉窗口样式&quot;">​</a></h3><p>在全局或页面的 .json 配置文件中，通过 backgroundColor 和 backgroundTextStyle 来配置下拉刷新窗口 的样式，其中：</p><ul><li>backgroundColor 用来配置下拉刷新 窗口的背景颜色 ，仅支持 16 进制的颜色值</li><li>backgroundTextStyle 用来配置下拉刷新 loading 的样式 ，仅支持 dark 和 light</li></ul><h3 id="_1-3-监听页面的下拉刷新事件" tabindex="-1">1.3 监听页面的下拉刷新事件 <a class="header-anchor" href="#_1-3-监听页面的下拉刷新事件" aria-label="Permalink to &quot;1.3 监听页面的下拉刷新事件&quot;">​</a></h3><p>在页面的 .js 文件中，通过 onPullDownRefresh() 函数即可监听当前页面的下拉刷新事件。</p><p>例如，在页面的 wxml 中有如下的 UI 结构，点击按钮可以让 count 值自增 +1 ：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 页面结构</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;count值为: {{count}}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;countAdd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;+1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// +1 按钮的点击事件处理函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">countAdd() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  this.setData({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: this.data.count + 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在触发页面的下拉刷新事件的时候，如果要把count 的值重置为 0：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 页面相关事件处理函数--监听用户下拉动作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onPullDownRefresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-4-停止下拉刷新" tabindex="-1">1.4 停止下拉刷新 <a class="header-anchor" href="#_1-4-停止下拉刷新" aria-label="Permalink to &quot;1.4 停止下拉刷新&quot;">​</a></h3><p>当处理完下拉刷新后，下拉刷新的<code>loading</code>效果会一直显示， 不会主动消失 ，所以需要手动隐藏下拉刷新的<code> loading</code>效果。</p><p>此时，调用 wx.stopPullDownRefresh() 可以停止当前页面的下拉刷新：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 页面相关事件处理函数--监听用户下拉动作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onPullDownRefresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当数据重置成功之后, 调用此函数, 关闭下拉刷新的效果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPullDownRefresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="上拉触底" tabindex="-1">上拉触底 <a class="header-anchor" href="#上拉触底" aria-label="Permalink to &quot;上拉触底&quot;">​</a></h2><p>上拉触底 是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而 加载更多数据 的行为。</p><p>在页面的 .js 文件中，通过 onReachBottom() 函数即可监听当前页面的上拉触底事件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 页面上拉触底事件的处理函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onReachBottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;触发了上拉触底的事件&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="配置上拉触底距离" tabindex="-1">配置上拉触底距离 <a class="header-anchor" href="#配置上拉触底距离" aria-label="Permalink to &quot;配置上拉触底距离&quot;">​</a></h3><p>上拉触底距离指的是 触发上拉触底事件时，滚动条距离页面底部的距离 。</p><p>可以在全局或页面的 .json 配置文件中，通过 onReachBottomDistance 属性来配置上拉触底的距离。</p><p>小程序默认的触底距离是50px ，在实际开发中，可以根据自己的需求修改这个默认值。</p><h1 id="声明周期" tabindex="-1">声明周期 <a class="header-anchor" href="#声明周期" aria-label="Permalink to &quot;声明周期&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>生命周期（Life Cycle Cycle）是指一个对象从 创建 -&gt; 运行 -&gt; 销毁 的整个阶段， 强调的是一个时间段 。例如：</p><ul><li>张三 出生 ，表示这个人 生命周期的开始</li><li>张三 离世 ，表示这个人 生命周期的结束</li><li>中间张三的一生，就是张三的生命周期</li></ul><p>我们可以把每个小程序运行的过程，也概括为生命周期：</p><ul><li>小程序的 启动 ，表示 生命周期的开始</li><li>小程序的 关闭 ，表示 生命周期的结束</li><li>中间小程序运行的过程，就是小程序的生命周期</li></ul><h2 id="声明周期的分类" tabindex="-1">声明周期的分类 <a class="header-anchor" href="#声明周期的分类" aria-label="Permalink to &quot;声明周期的分类&quot;">​</a></h2><p>在小程序中，生命周期分为两类，分别是： ① 应用生命周期</p><ul><li>特指小程序从启动 -&gt; 运行 -&gt; 销毁的过程</li></ul><p>② 页面生命周期</p><ul><li>特指小程序中，每个页面的加载 -&gt; 渲染 -&gt; 销毁的过程</li></ul><p>其中， 页面的生命周期范围较小，应用程序的生命周期范围较大：</p><p><img src="`+l+`" alt="image-20250722182745574"></p><h2 id="生命周期函数" tabindex="-1">生命周期函数 <a class="header-anchor" href="#生命周期函数" aria-label="Permalink to &quot;生命周期函数&quot;">​</a></h2><p>生命周期函数：是由小程序框架提供的内置函数，会伴随着生命周期自动按次序执行 。</p><p>生命周期函数的作用：允许程序员在特定的时间点 ，执行某些特定的操作。例如，页面刚加载的时候，可以在 onLoad 生命周期函数中初始化页面的数据。</p><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>生命周期 强调的是 时间段，生命周期函数强调的是时间点 。</p></div><p>小程序中的生命周期函数分为两类，分别是：</p><p>① 应用的生命周期函数</p><ul><li><p>特指小程序从启动 -&gt; 运行 -&gt; 销毁期间依次调用的那些函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 小程序初始化完成时,执行此函数,全局只触发一次。可以做一些初始化的工作。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onLaunch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 小程序启动,或从后台进入前台显示时触发。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 小程序从前台进入后台时触发。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onHide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><p>② 页面的生命周期函数</p><ul><li><p>特指小程序中，每个页面从加载 -&gt; 渲染 -&gt; 销毁期间依次调用的那些函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面的 .js 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听页面加载, 一个页面只调用1次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onReady</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听页面初次渲染完成, 一个页面只调用1次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onHide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听页面隐藏</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onUnload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听页面卸载, 一个页面只调用1次</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div></li></ul><h1 id="wxs-脚本" tabindex="-1">wxs 脚本 <a class="header-anchor" href="#wxs-脚本" aria-label="Permalink to &quot;wxs 脚本&quot;">​</a></h1><h2 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>WXS （WeiXin Script Script）是 小程序独有的一套脚本语言 ，结合 WXML ，可以构建出页面的结构。</p><p>wxml中无法调用在页面的 .js 中定义的函数， 但是wxml 中可以调用 wxs 中定义的函数。因此，小程序中wxs 的典型应用场景 就是“ 过滤器 ”。</p><p>虽然 wxs 的语法类似于 JavaScriptJavaScript，但是 wxs 和 JavaScript 是完全不同的两种语言：</p><p>① wxs 有自己的数据类型</p><ul><li>number 数值类型、 string 字符串类型、 boolean 布尔类型、 object 对象类型、</li><li>function 函数类型、 array 数组类型、 date 日期类型、 regexp 正则</li></ul><p>② wxs 不支持类似于 ES6 及以上的语法形式</p><ul><li>不支持 ：let 、const 、解构赋值、展开运算符、箭头函数、对象属性简写、 etc...</li><li>支持 ：var 定义变量、普通 function 函数等类似于 ES5 的语法</li></ul><p>③ wxs 遵循 CommonJS 规范</p><ul><li>module 对象</li><li>require() 函数</li><li>module.exports 对</li></ul><h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h2><h3 id="_1-内嵌-wxs-脚本" tabindex="-1">1. 内嵌 wxs 脚本 <a class="header-anchor" href="#_1-内嵌-wxs-脚本" aria-label="Permalink to &quot;1. 内嵌 wxs 脚本&quot;">​</a></h3><p>wxs代码可以编写在 wxml 文件中的 <code>&lt;wxs&gt;</code> 标签内，就像 Javascript 代码可以编写在 html 文件中的 <code>&lt;script&gt;</code> 标签内一样。 wxml文件中的每个<code> &lt;wxs&gt;</code> <code>&lt;/wxs&gt;</code> 标签， 必须提供 module 属性 ，用来指定 当前 wxs 的模块名称 ，方便在 wxml 中访问模块中的成员：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{m1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username)}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wxs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将文本转为大写形式 zs -&gt; ZS</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-定义外联的-wxs-脚本" tabindex="-1">2. 定义外联的 wxs 脚本 <a class="header-anchor" href="#_2-定义外联的-wxs-脚本" aria-label="Permalink to &quot;2. 定义外联的 wxs 脚本&quot;">​</a></h3><p>wxs代码还可以编写在 以 .wxs 为后缀名的文件内 ，就像 javascript 代码可以 编写在.js 为后缀名的文件中 一样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tools.wxs 文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toLower: toLower</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-使用外联的-wxs-脚本" tabindex="-1">3. 使用外联的 wxs 脚本 <a class="header-anchor" href="#_3-使用外联的-wxs-脚本" aria-label="Permalink to &quot;3. 使用外联的 wxs 脚本&quot;">​</a></h3><p>在 wxml 中引入外联的 wxs 脚本时， 必须为 <code>&lt;wxs&gt;</code> 标签添加 module 和 src 属性，其中：</p><ul><li><p>module 用来指定模块的名称</p></li><li><p>src 用来指定要引入的脚本的路径，且必须是相对路径</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 调用 m2 模块中的方法 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{m2.toLower(country)}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 引用外联的 tools.wxs 脚本，并命名为 m2 (本身不参与渲染) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">wxs</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../utils/tools.wxs&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">wxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="wxs-的特点" tabindex="-1">wxs 的特点 <a class="header-anchor" href="#wxs-的特点" aria-label="Permalink to &quot;wxs 的特点&quot;">​</a></h2><ol><li><p>与 js 不同之处</p><p>为了降低 wxswxs（WeiXin Script ）的学习成本 wxs 语言在设计时借大量鉴了 JavaScript 的语法。但是本质上，wxs 和 JavaScript 是完全不同的两种语言！</p></li><li><p>不能作为组件的事件回调：</p><p>wxs典型的应用场景就是“过滤器”，经常配合 Mustache 语法进行使用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;view&gt;{{ m2.toLower(country) }}&lt;/view&gt;</span></span></code></pre></div><p>在微信小程序的 <strong>WXML 模板</strong> 中，像 <code>country</code> 这样的变量可以直接使用（不需要写 <code>this.country</code>），是因为 WXML 的数据绑定机制会自动从当前页面的 <strong><code>data</code> 对象</strong> 中查找该变量。这是小程序框架的设计特性，与 Vue（组合式api）等前端框架的数据绑定逻辑类似。</p><p>但是，在 wxs 中定义的函数不能作为组件的事件回调函数 。因此，下面的用法是错误的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;button bindtap=&quot;m2.toLower&quot;&gt;按钮&lt;/button&gt;</span></span></code></pre></div></li><li><p>隔离性</p><p>隔离性指的是 wxs 的运行环境和其他 JavaScript 代码是隔离的。体现在如下两方面： ① wxs 不能调用 js 中定义的函数</p><p>② wxs 不能调用小程序提供的 API</p></li><li><p>性能好</p><ul><li>在 iOS 设备 上，小程序内的 WXS 会比 JavaScript 代码 快 2 ~ 20 倍</li><li>在 android 设备 上，二者的运行效率</li></ul></li></ol><h1 id="案例-本地生活" tabindex="-1">案例 - 本地生活 <a class="header-anchor" href="#案例-本地生活" aria-label="Permalink to &quot;案例 - 本地生活&quot;">​</a></h1>`,117)]))}const E=a(e,[["render",p]]);export{g as __pageData,E as default};
