import{_ as p,c as e,o as h,ae as l,j as s,a,t as n}from"./chunks/framework._lwO82Iq.js";const k="/vitepress_init/assets/image-%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6.dqPfdeV5.png",d="/vitepress_init/assets/image-%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB.Dlyti-4M.png",F=JSON.parse('{"title":"总结","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-项目创建/02-小程序/04-基础加强.md","filePath":"articles/01-项目创建/02-小程序/04-基础加强.md"}'),o={name:"articles/01-项目创建/02-小程序/04-基础加强.md"},r={class:"details custom-block"},E={tabindex:"0"},g={tabindex:"0"};function y(t,i,c,u,m,b){return h(),e("div",null,[i[26]||(i[26]=l('<h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><p>① 能够创建并引用组件</p><ul><li>全局引用 、 局部引用usingComponents</li></ul><p>② 能够知道如何修改组件的样式隔离选项</p><ul><li>options -&gt; styleIsolationstyleIsolation（ isolated, apply apply-shared, sharedshared）</li></ul><p>③ 能够知道如何定义和使用数据监听器</p><ul><li>observers</li></ul><p>④ 能够知道如何定义和使用纯数据字段</p><ul><li>options -&gt; pureDataPattern</li></ul><p>⑤ 能够知道实现组件父子通信有哪 3种方式</p><ul><li>属性绑定、 事件绑定 、this.selectComponent(&#39; id 或class 选择器 &#39;)</li></ul><p>⑥ 能够知道如何定义和使用 behaviors</p><ul><li>调用 Behavior() 构</li></ul><h1 id="自定义组件" tabindex="-1">自定义组件 <a class="header-anchor" href="#自定义组件" aria-label="Permalink to &quot;自定义组件&quot;">​</a></h1><h2 id="_1-1-创建组件" tabindex="-1">1.1 创建组件 <a class="header-anchor" href="#_1-1-创建组件" aria-label="Permalink to &quot;1.1 创建组件&quot;">​</a></h2><p>① 在项目的根目录中，鼠标右键，创建 componentscomponents-&gt; test 文件夹</p><p>② 在新建的 components -&gt; test 文件夹上，鼠标右键，点击“ 新建 ComponentComponent”</p><p>③ 键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为 .js js，.json json， .wxml 和 .wxss</p><p>注意：为了保证目录结构的清晰，建议把不同的组件，存放到单独目录中，例如：</p><p><img src="'+k+`" alt="image-20250726163830499"></p><h2 id="_1-2-引用组件" tabindex="-1">1.2 引用组件 <a class="header-anchor" href="#_1-2-引用组件" aria-label="Permalink to &quot;1.2 引用组件&quot;">​</a></h2><p>组件的引用方式分为“ 局部引用 ”和 全局引用 ”：</p><ul><li><p>在页面的 <code>.json</code> 配置文件中引用组件的方式，叫做“局部引用”。示例代码如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在页面的 .json 文件中，引入组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;usingComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;my-test1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/components/test1/test1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在页面的 .wxml 文件中，使用组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>在 app.json 全局配置文件中引用组件的方式，叫做“全局引用”：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 app.json 文件中, 引入组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 省略不必要的代码 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;window&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 省略不必要的代码 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;usingComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;my-test2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/components/test2/test2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 在页面的 .wxml 文件中, 使用组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="_1-3-全局引用-vs-局部引用" tabindex="-1">1.3 全局引用 vs 局部引用 <a class="header-anchor" href="#_1-3-全局引用-vs-局部引用" aria-label="Permalink to &quot;1.3 全局引用 vs 局部引用&quot;">​</a></h2><p>根据组件的 使用频率 和范围 ，来选择合适的引用方式：</p><ul><li>如果某组件 在多个页面中经常被用到 ，建议进行“全局引用</li><li>如果某组件只 在特定的页面中被用到 ，建议进行“局部引用</li></ul><h2 id="_1-4-组件和页面的区别" tabindex="-1">1.4 组件和页面的区别 <a class="header-anchor" href="#_1-4-组件和页面的区别" aria-label="Permalink to &quot;1.4 组件和页面的区别&quot;">​</a></h2><p>从表面来看，组件和页面都是由 .js 、.json 、.wxml 和 .wxss 这四个文件组成的。但是，组件和页面的 .js 与 .json 文件有明显的不同：</p><ul><li>组件的 .json 文件中需要声明 &quot;component&quot;: true 属性</li><li>组件的 .js 文件中调用的是 Component() 函数</li><li>组件的事件处理函数需要定义到 methods 节点中</li></ul><h2 id="_2-样式" tabindex="-1">2. 样式 <a class="header-anchor" href="#_2-样式" aria-label="Permalink to &quot;2. 样式&quot;">​</a></h2><h2 id="_2-1-组件样式隔离" tabindex="-1">2.1 组件样式隔离 <a class="header-anchor" href="#_2-1-组件样式隔离" aria-label="Permalink to &quot;2.1 组件样式隔离&quot;">​</a></h2><p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的UI 结构，如图所示：</p><ul><li>组件 A 的样式 不会影响 组件 C 的样式</li><li>组件 A 的样式 不会影响 小程序页面的样式</li><li>小程序页面的样式 不会影响 组件 A 和 C 的样式</li></ul><p><img src="`+d+`" alt="image-20250726164741183"></p><p>好处：① 防止外界的样式影响组件内部的样式；② 防止组件的样式破坏外界的样式</p><h2 id="_2-2-组件样式隔离的注意点" tabindex="-1">2.2 组件样式隔离的注意点 <a class="header-anchor" href="#_2-2-组件样式隔离的注意点" aria-label="Permalink to &quot;2.2 组件样式隔离的注意点&quot;">​</a></h2><ul><li>app.wxss 中的全局样式对组件无效</li><li>只有 class 选择器会有样式隔离效果， id 选择器、属性选择器、标签选择器不受样式隔离的影响</li></ul><p>建议：在组件和引用组件的页面中建议使用 class 选择器， 不要使用 id 、属性、标签选择器 ！</p><h2 id="_2-3-修改组件的样式隔离选项" tabindex="-1">2.3 修改组件的样式隔离选项 <a class="header-anchor" href="#_2-3-修改组件的样式隔离选项" aria-label="Permalink to &quot;2.3 修改组件的样式隔离选项&quot;">​</a></h2><p>默认情况下，自定义组件的样式隔离特性能够防止组件内外样式互相干扰的问题。但有时，我们希望在外界能 够控制组件内部的样式，此时，可以通过 styleIsolation 修改组件的样式隔离选项，用法如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件的 .js 文件中新增如下配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    styleIsolation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;isolated&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或在组件的 .json 文件中新增如下配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;styleIsolation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isolated&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-4-styleisolation-的可选值" tabindex="-1">2.4 styleIsolation 的可选值 <a class="header-anchor" href="#_2-4-styleisolation-的可选值" aria-label="Permalink to &quot;2.4 styleIsolation 的可选值&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">可选值</th><th style="text-align:center;">组件样式对外部页面的影响</th><th style="text-align:center;">外部页面样式对组件的影响</th><th style="text-align:center;">典型使用场景</th></tr></thead><tbody><tr><td style="text-align:center;"><code>isolated（默认值）</code></td><td style="text-align:center;">不会影响</td><td style="text-align:center;">不会影响</td><td style="text-align:center;">需要严格隔离组件样式（默认值）</td></tr><tr><td style="text-align:center;"><code>apply-shared</code></td><td style="text-align:center;">不会影响</td><td style="text-align:center;">会穿透生效</td><td style="text-align:center;">外部页面需覆盖组件内部分样式</td></tr><tr><td style="text-align:center;"><code>shared</code></td><td style="text-align:center;">会穿透生效</td><td style="text-align:center;">会穿透生效</td><td style="text-align:center;">组件与外部页面共享全局样式</td></tr></tbody></table><h2 id="_3-数据、方法和属性" tabindex="-1">3. 数据、方法和属性 <a class="header-anchor" href="#_3-数据、方法和属性" aria-label="Permalink to &quot;3. 数据、方法和属性&quot;">​</a></h2><h3 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data&quot;">​</a></h3><p>在小程序组件中，用于组件模板渲染的私有数据，需要定义到 data 节点中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 组件的初始数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="method" tabindex="-1">method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;method&quot;">​</a></h3><p>在小程序组件中， 事件处理函数和自定义方法需要定义到 methods 节点中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件的方法列表【包含事件处理函数和自定义方法】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 事件处理函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_showCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 this 直接调用自定义方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _showCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义方法建议以 _ 开头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count值为: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.count,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="properties" tabindex="-1">properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;properties&quot;">​</a></h3><p>在小程序组件中，properties 是组件的对外属性，用来接收外界传递到组件中的数据：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 属性定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完整定义属性的方式【当需要指定属性默认值时,建议使用此方式】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: Number, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 属性值的数据类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 属性默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max: Number </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简化定义属性的方式【不需指定属性默认值时,可以使用简化方式】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="data-和-properties-的区别" tabindex="-1">data 和 properties 的区别 <a class="header-anchor" href="#data-和-properties-的区别" aria-label="Permalink to &quot;data 和 properties 的区别&quot;">​</a></h3><p>在小程序的组件中， properties 属性和 data 数据的用法相同，它们都是可读可写的，只不过：</p><ul><li>data 更倾向于 存储组件的私有数据</li><li>properties 更倾向于 存储外界传递到组件中的数据</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    showInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果: {count: 0, max: 10}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果: {count: 0, max: 10}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 结果为 true,证明 data 数据和 properties 属性【在本质上是一样的、都是可读可写的】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="使用-setdata-修改-properties-的值" tabindex="-1">使用 setData 修改 properties 的值 <a class="header-anchor" href="#使用-setdata-修改-properties-的值" aria-label="Permalink to &quot;使用 setData 修改 properties 的值&quot;">​</a></h3><p>由于 data 数据 和 properties 属性 在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染， 或使用 setData 为 properties 中的属性重新赋值：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 在组件的 .wxml 文件中使用 properties 属性的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;max属性的值为: {{max}}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: { max: Number }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties.max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 setData 修改属性的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,63)),s("details",r,[i[19]||(i[19]=s("summary",null,"也要看情况",-1)),i[20]||(i[20]=s("p",null,[a("因为**"),s("code",null,"properties"),a(" 定义的属性也会挂载到组件实例的 data 上**（表现得像是 data 的一部分），所以你可以用 "),s("code",null,"setData()"),a(" 来更新它，就像你更新 "),s("code",null,"data"),a(" 一样。")],-1)),i[21]||(i[21]=s("p",null,"但是：逻辑上效果是否生效，要看「绑定方式」",-1)),s("table",E,[i[5]||(i[5]=s("thead",null,[s("tr",null,[s("th",null,"使用方式"),s("th",null,[s("code",null,"setData({ max: ... })"),a(" 是否有效")]),s("th",null,"建议")])],-1)),s("tbody",null,[i[4]||(i[4]=s("tr",null,[s("td",null,"属性未绑定（写死或不传）"),s("td",null,"✅ 有效"),s("td",null,"可以直接改")],-1)),s("tr",null,[s("td",null,[i[0]||(i[0]=a("属性绑定（如 ",-1)),s("code",null,'max="'+n(t.value)+'"',1),i[1]||(i[1]=a("）",-1))]),i[2]||(i[2]=s("td",null,"❌ 无效，会被外部覆盖（可短暂修改）",-1)),i[3]||(i[3]=s("td",null,"触发事件通知父组件修改",-1))])])]),i[22]||(i[22]=l(`<p>🔧 举个例子：</p><p>父组件的 JS：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Page({</span></span>
<span class="line"><span>  data: {</span></span>
<span class="line"><span>    value: 5</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>父组件的 WXML：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;my-component max=&quot;{{value}}&quot; /&gt;</span></span></code></pre></div><hr><p>🔍 这时候发生了什么？</p><ul><li><code>my-component</code> 的 <code>max</code> 属性值是 <strong>父组件的 <code>value</code></strong>。</li><li>所以 <code>max</code> 是**“受控属性”**。</li><li>在 <code>my-component</code> 内部用 <code>this.setData({ max: xxx })</code> 来修改，是不会真正生效的（或会被下一轮更新自动覆盖）。</li></ul><hr><p>✅ 不绑定的情况：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;my-component max=&quot;5&quot; /&gt;  &lt;!-- 字面值，字符串形式 --&gt;</span></span></code></pre></div><p>或：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;my-component /&gt;  &lt;!-- 使用默认值 --&gt;</span></span></code></pre></div><p>这种情况下，<code>max</code> 没有被“动态绑定”，组件内部用 <code>setData({ max: ... })</code> 是有效的。</p>`,14)),s("p",null,[i[6]||(i[6]=a("但：当父组件中使用 ",-1)),s("code",null,'<my-component max="'+n(t.anyValue)+'" />',1),i[7]||(i[7]=a(" 时，组件内部 ",-1)),i[8]||(i[8]=s("code",null,"setData({ max: ... })",-1)),i[9]||(i[9]=a(" 虽然 ",-1)),i[10]||(i[10]=s("strong",null,"语法合法",-1)),i[11]||(i[11]=a("，但",-1)),i[12]||(i[12]=s("strong",null,"不会生效",-1)),i[13]||(i[13]=a("，因为：",-1))]),i[23]||(i[23]=s("ul",null,[s("li",null,[s("code",null,"max"),a(" 是由父组件"),s("strong",null,"绑定传入"),a("的（受控属性），在子组件里修改 "),s("code",null,"max"),a("，"),s("strong",null,"下一轮渲染时会被父组件的值重新覆盖"),a("。")]),s("li",null,"也就是说，页面上可能会短暂看到变化，但很快就又变回原值。")],-1)),i[24]||(i[24]=s("hr",null,null,-1)),i[25]||(i[25]=s("p",null,"📌 总结一下",-1)),s("table",g,[i[18]||(i[18]=s("thead",null,[s("tr",null,[s("th",null,"用法"),s("th",null,"是否“绑定”"),s("th",null,"说明")])],-1)),s("tbody",null,[s("tr",null,[s("td",null,[s("code",null,'<my-component max="'+n(t.value)+'" />',1)]),i[14]||(i[14]=s("td",null,"✅ 是绑定",-1)),i[15]||(i[15]=s("td",null,"max 属性受父组件数据控制，组件内部不能直接改",-1))]),i[16]||(i[16]=s("tr",null,[s("td",null,[s("code",null,'<my-component max="5" />')]),s("td",null,"❌ 非绑定"),s("td",null,"max 是字符串形式字面量，可以在组件内部用 setData 修改")],-1)),i[17]||(i[17]=s("tr",null,[s("td",null,[s("code",null,"<my-component />")]),s("td",null,"❌ 非绑定"),s("td",null,"使用默认值，也可以在组件内部修改")],-1))])])])])}const v=p(o,[["render",y]]);export{F as __pageData,v as default};
