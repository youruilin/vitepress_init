import{_ as s,c as n,o as e,ag as t}from"./chunks/framework.C1NIp7lD.js";const u=JSON.parse('{"title":"图片注释","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-关于本文档/01-关于本文档/05-图片注释插件.md","filePath":"articles/04-关于本文档/01-关于本文档/05-图片注释插件.md"}'),i={name:"articles/04-关于本文档/01-关于本文档/05-图片注释插件.md"};function p(l,a,o,c,r,d){return e(),n("div",null,[...a[0]||(a[0]=[t(`<h1 id="图片注释" tabindex="-1">图片注释 <a class="header-anchor" href="#图片注释" aria-label="Permalink to &quot;图片注释&quot;">​</a></h1><p><code>markdown-it-implicit-figures</code> 是一个 <strong>markdown-it 插件</strong>，可以让 VitePress 在渲染图片时，自动把普通的 Markdown 图片包裹在 <code>&lt;figure&gt;</code> 标签里，并且支持 <code>&lt;figcaption&gt;</code> 来做图片描述。</p><p><a href="https://github.com/ruanyf/markdown-it-implicit-figures/" target="_blank" rel="noreferrer">markdown-it-implicit-figures</a></p><hr><h3 id="🔹-默认-markdown-写法" tabindex="-1">🔹 默认 Markdown 写法 <a class="header-anchor" href="#🔹-默认-markdown-写法" aria-label="Permalink to &quot;🔹 默认 Markdown 写法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>![图片描述](./example.png)</span></span></code></pre></div><p>在 VitePress 默认情况下 → 输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;p&gt;&lt;img src=&quot;./example.png&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;</span></span></code></pre></div><hr><h3 id="🔹-使用-markdown-it-implicit-figures-后" tabindex="-1">🔹 使用 <code>markdown-it-implicit-figures</code> 后 <a class="header-anchor" href="#🔹-使用-markdown-it-implicit-figures-后" aria-label="Permalink to &quot;🔹 使用 \`markdown-it-implicit-figures\` 后&quot;">​</a></h3><p>同样的写法，会输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;figure&gt;</span></span>
<span class="line"><span>  &lt;img src=&quot;./example.png&quot; alt=&quot;图片描述&quot;&gt;</span></span>
<span class="line"><span>  &lt;figcaption&gt;图片描述&lt;/figcaption&gt;</span></span>
<span class="line"><span>&lt;/figure&gt;</span></span></code></pre></div><p>这样就能自动生成 <strong>图注</strong>，不用自己写 <code>&lt;figure&gt;</code> + <code>&lt;figcaption&gt;</code>。</p><hr><h3 id="🔹-安装" tabindex="-1">🔹 安装 <a class="header-anchor" href="#🔹-安装" aria-label="Permalink to &quot;🔹 安装&quot;">​</a></h3><p>在你的 VitePress 项目里：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add markdown-it-implicit-figures</span></span>
<span class="line"><span># 或</span></span>
<span class="line"><span>npm install markdown-it-implicit-figures</span></span></code></pre></div><hr><h3 id="🔹-配置-vitepress" tabindex="-1">🔹 配置 VitePress <a class="header-anchor" href="#🔹-配置-vitepress" aria-label="Permalink to &quot;🔹 配置 VitePress&quot;">​</a></h3><p>在 <code>.vitepress/config.ts</code> 里添加：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;vitepress&#39;</span></span>
<span class="line"><span>import implicitFigures from &#39;markdown-it-implicit-figures&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  markdown: {</span></span>
<span class="line"><span>    config: (md) =&gt; {</span></span>
<span class="line"><span>      md.use(implicitFigures, {</span></span>
<span class="line"><span>        dataType: false,      // &lt;figure data-type=&quot;image&quot;&gt;，可关闭</span></span>
<span class="line"><span>        figcaption: true,     // 启用 figcaption</span></span>
<span class="line"><span>        tabindex: false,      // &lt;figure tabindex=&quot;1&quot;&gt;，可关闭</span></span>
<span class="line"><span>        link: false           // 是否把图片自动包裹在 &lt;a&gt; 里</span></span>
<span class="line"><span>      })</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre></div><hr><h3 id="🔹-效果示例" tabindex="-1">🔹 效果示例 <a class="header-anchor" href="#🔹-效果示例" aria-label="Permalink to &quot;🔹 效果示例&quot;">​</a></h3><p>Markdown：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>![这是说明的图片](./example.png)</span></span></code></pre></div><p>渲染后：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;figure&gt;</span></span>
<span class="line"><span>  &lt;img src=&quot;./example.png&quot; alt=&quot;这是说明的图片&quot;&gt;</span></span>
<span class="line"><span>  &lt;figcaption&gt;这是说明的图片&lt;/figcaption&gt;</span></span>
<span class="line"><span>&lt;/figure&gt;</span></span></code></pre></div>`,27)])])}const h=s(i,[["render",p]]);export{u as __pageData,h as default};
